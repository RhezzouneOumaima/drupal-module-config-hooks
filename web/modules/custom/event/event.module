<?php


function event_theme($existing, $type, $theme, $path) {
  return [
      /*  'node__view__flash_news' => [
          'template'  => 'node--view--flash-news',
        ]
        ,
        'block__views_block__flash_news_block_1' => [
          'template' => 'block--views-block--flash-news-block-1'
        ]*/
        'node__event__full' => [
          'base hook' => 'node',
          'template' => 'node--event--full'
        ],
        'node__view__events_two_columns' =>
        [
          'template' => 'node--view--events-two-columns'
        ]
      ];

}

/**
 * When a site has tasks that need to be performed periodically, such as clearing cache or
 *  generating reports, 
 * hook_cron() can be used to define those tasks and specify when they should be executed.
 */
function event_cron() {

  \Drupal::messenger()->addMessage(t("Hello from my module hook cron! "));

}


function event_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  //\Drupal::messenger()->addMessage(t("form_id of this form is @id :",['@id' => $form_id]));
  if($form_id == 'node_article_edit_form')
  {
    $form['actions']['submit']['#value'] = t("save this awesoooomme article !");
  }

}

/** The diff between page alter and preprocess
 * preprocess_page() is executed before the page is rendered and is used to modify variables that are used in the page template. This hook allows developers to modify the page's variables, such as the page title, content, or classes applied to the body tag.

*hook_page_alter() is executed after the page is rendered and allows developers to modify the HTML output of the page. This hook is often used to add, remove, or modify CSS and JavaScript files, or to add new HTML elements to the page.

*In summary, preprocess_page() is used to modify the variables that are used in the page template before it is rendered, while hook_page_alter() is used to modify the HTML output of the page after it is rendered.
 */

 //TOOOO CHECK AGAIN 
function event_page_alter(&$page) {

  dump($page);

}

/**
 * Implements hook_node_insert().
 */
function event_node_insert($node) {
  // Perform custom logic when a node is inserted.
  if ($node->getType() == 'article') {
    \Drupal::messenger()->addMessage(t("New article is created  "));
  }
}


/**
 * Implements hook_node_update().
 */
function event_node_update($node) {
  // Check if this is a node of a certain type.
  if ($node->getType() == 'article') {
    \Drupal::messenger()->addMessage(t("article is updated "));

  }
}


/**
 * Implements hook_node_presave().
 * declenche avant que le noued enrogistre pour faire des modifs
 */
function event_node_presave($node) {
  // Check if this is a node of a certain type.
  if ($node->getType() == 'article') {
    // Perform some custom logic here.
    // For example, update a field on the node.
    $node->set('body', 'body from presave');
  }
}
/**
 * apres creation d'un content type et avant qu'il est insérer dans la BD
 * there"s hook_node_type_update apres update
 */
function event_node_type_insert($info) {
  \Drupal::messenger()->addMessage(t('You have just created a content type '));
}


/**
 * Implements hook_preprocess_node().
 */

function event_preprocess_node(&$variables) {

  $node = $variables['node'];
  if ($node->getType() == 'event') {
      $variables["name"]=$variables["content"]["field_event_name"][0]["#context"]["value"];
      $variables["category"]=$variables["content"]["field_category"][0]["#title"];
      $variables["body"]=$variables["content"]["body"][0]["#text"];


    }
  
  

 
  }




?>